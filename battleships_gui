import copy
import pygame
import random
from time import sleep
pygame.init()

WIN_WIDTH, WIN_HEIGHT = 700, 580
BF_WIDTH, BF_HEIGHT = 240, 240

COLOR_ACTIVE_CELL = (230, 230, 230)
COLOR_DISABLED_CELL = (180, 180, 180)
COLOR_SELECTED = (34, 177, 76)
COLOR_LOCKED = (255, 0, 0)
COLOR_LINE = (0, 0, 0)
COLOR_BG = (90, 90, 90)

FPS = 60
EDGE = 5

WIN = pygame.display.set_mode((WIN_WIDTH, WIN_HEIGHT))
FONT = pygame.font.SysFont('Comic Sans', 4 * EDGE)

TEXT_PLAYER = FONT.render('Player\'s board:', True, (0, 0, 0))
TEXT_OPP = FONT.render('Opponent\'s board:', True, (0, 0, 0))

MSG_PLAYER_MISS = 'You missed.'
MSG_PLAYER_TURN = 'Your turn.'
MSG_OPP_TURN = 'Opponent\'s turn.'
MSG_PICK_CELL = 'Pick a cell to shoot at.'
MSG_PICK_ANOTHER = 'Pick another cell.'
MSG_HIT = 'Great, It\'s a hit!'
MSG_MOVE_REPEAT = 'You already shot this cell.'
MSG_LETS_PLAY = 'Let\'s play Battleship!'
MSG_EMPTY = ''
MSG_PLAYER_NO_SHIPS = 'All player\'s ships destroyed!'
MSG_OPP_WINS = 'Opponent wins!'
MSG_OPP_NO_SHIPS = 'All opponent\'s ships destroyed!'
MSG_PLAYER_WINS = 'You win!'
MSG_LEGEND = 'Legend:'
MSG_SELECT = 'Use ARROWS or CLICK to select cells'
MSG_LOCK = 'Press SPACE BAR to lock the cell'
MSG_PLACE_SHIP = 'Press ENTER to place the ship'
MSG_ATTACK = 'Press ENTER to attack selected cell'

LEGEND_PLACEMENT = [MSG_LEGEND, MSG_SELECT, MSG_LOCK, MSG_PLACE_SHIP]
LEGEND_SHOOTING = [MSG_LEGEND, MSG_SELECT, MSG_ATTACK]

TARGET_HIT = 'X'
TARGET_MISSED = '-'
TARGET_REVEALED = 'O'
TARGET_NOT = ''

pl_ship_list = [
    ['Aircraft Carrier', 5, 1],
    ['Battleship', 4, 1],
    ['Submarine', 3, 1],
    ['Destroyer', 2, 2],
    ['Patrol Boat', 1, 2],
]

opp_ship_list = copy.deepcopy(pl_ship_list)

ship_lengths = [[i for _ in range(j)] for _, i, j in pl_ship_list]

hits = sum([i for j in ship_lengths for i in j])


class Battlefield:
    width = BF_WIDTH
    height = BF_HEIGHT
    window = WIN

    def __init__(self, rows, cols, h_offset):
        self.rows = rows
        self.cols = cols
        self.h_offset = h_offset
        self.cells = [[Cell(i, j, self.width, self.height, self.h_offset)
                       for i in range(self.rows)]
                      for j in range(self.cols)]
        self.selected = None
        self.locked = []
        self.moves = []
        self.adjacent = []
        self.hits_left = hits
        self.ships = []
        self.last_call = []

    def draw(self):
        for x in range(self.rows):
            for y in range(self.cols):
                self.cells[x][y].draw()

        gap = self.width / 10
        for x in range(self.rows + 1):
            pygame.draw.line(self.window, COLOR_LINE,
                             (0, self.h_offset + x * gap),
                             (self.width, self.h_offset + x * gap), 2)
        for x in range(self.cols+1):
            pygame.draw.line(self.window, COLOR_LINE, (x * gap, self.h_offset),
                             (x * gap, self.height + self.h_offset), 2)

    def disable(self):
        for x in range(self.rows):
            for y in range(self.cols):
                self.cells[x][y].color = COLOR_DISABLED_CELL

    def select_cell(self, row, col):
        self.cells[row][col].selected = True
        self.selected = (row, col)

    def deselect_cells(self):
        for x in range(self.rows):
            for y in range(self.cols):
                self.cells[x][y].selected = False
        self.selected = None

    def read_cell(self, pos):
        if pos[0] < self.width and 0 < pos[1] - self.h_offset < self.height:
            gap = self.width // 10
            x = pos[0] // gap
            y = (pos[1] - self.h_offset) // gap
            return int(y), int(x)

    def move_arrows(self, direction):
        row, col = self.selected
        if direction == 'up':
            if row > 0:
                self.selected = (self.selected[0] - 1, self.selected[1])
                self.cells[row - 1][col].selected = True
                self.cells[row][col].selected = False
        if direction == 'down':
            if row < 9:
                self.selected = (self.selected[0] + 1, self.selected[1])
                self.cells[row + 1][col].selected = True
                self.cells[row][col].selected = False
        if direction == 'left':
            if col > 0:
                self.selected = (self.selected[0], self.selected[1] - 1)
                self.cells[row][col - 1].selected = True
                self.cells[row][col].selected = False
        if direction == 'right':
            if col < 9:
                self.selected = (self.selected[0], self.selected[1] + 1)
                self.cells[row][col + 1].selected = True
                self.cells[row][col].selected = False

    def is_ship_hit(self, pos):
        for ship in self.ships:
            if pos in ship.cells:
                return ship


class PlayerField(Battlefield):
    def lock_cell(self):
        row, col = self.selected
        if self.cells[row][col].locked:
            self.cells[row][col].locked = False
            self.locked.remove((row, col))
        else:
            self.cells[row][col].locked = True
            self.locked.append((row, col))

    def unlock_cells(self):
        for x in range(self.rows):
            for y in range(self.cols):
                self.cells[x][y].locked = False
        self.locked = []

    def opponents_turn(self):
        hit = True
        while hit:
            if self.adjacent:
                x, y = self.adjacent.pop(random.randint(0,
                                                        len(self.adjacent)-1))
            else:
                x, y = [random.randint(0, 9) for _ in range(2)]

            if (x, y) in self.moves:
                continue

            hit = False
            self.moves.append((x, y))

            for ship in self.ships:
                if (x, y) in ship.cells:
                    hit = True
                    ship.reduce((x, y))
                    self.cells[x][y].value = TARGET_HIT
                    self.hits_left -= 1
                    ship.check_damage()
                    if ship.destroyed:
                        self.adjacent = []
                    else:
                        if x > 0:
                            self.adjacent.append((x - 1, y))
                        if x < 9:
                            self.adjacent.append((x + 1, y))
                        if y > 0:
                            self.adjacent.append((x, y - 1))
                        if y < 9:
                            self.adjacent.append((x, y + 1))
                        continue
                if not hit:
                    self.cells[x][y].value = TARGET_MISSED

    def is_placement_correct(self):
        pl_ship_name, pl_ship_len, ship_num = pl_ship_list[0]
        if len(self.locked) == pl_ship_len:

            x_values = [self.locked[x][0] for x in range(len(self.locked))]
            y_values = [self.locked[x][1] for x in range(len(self.locked))]

            x_range = range(max(0, min(x_values) - 1),
                            min(max(x_values) + 2, 10))
            y_range = range(max(0, min(y_values) - 1),
                            min(max(y_values) + 2, 10))

            if not any(self.cells[x][y].value
                       for x in x_range for y in y_range):
                rows = []
                cols = []
                for x, y in self.locked:
                    rows.append(x)
                    cols.append(y)
                    self.cells[x][y].locked = False

                if len(set(rows)) == 1 and sum(set(cols)) == \
                        sum([min(cols) + i for i in range(pl_ship_len)]):
                    for x, y in self.locked:
                        self.cells[x][y].value = TARGET_REVEALED
                    self.ships.append(Ship(pl_ship_name, self.locked,
                                           'horizontal'))
                elif len(set(cols)) == 1 and sum(set(rows)) == \
                        sum([min(rows) + i for i in range(pl_ship_len)]):
                    for x, y in self.locked:
                        self.cells[x][y].value = TARGET_REVEALED
                    self.ships.append(Ship(pl_ship_name, self.locked,
                                           'vertical'))
                if ship_num == 1:
                    pl_ship_list.pop(0)
                else:
                    pl_ship_list[0][2] -= 1
        self.unlock_cells()
        if not pl_ship_list:
            self.deselect_cells()


class OpponentField(Battlefield):
    def __init__(self, rows, cols, h_offset):
        super().__init__(rows, cols, h_offset)

        for x in range(self.rows):
            for y in range(self.cols):
                self.cells[x][y].visible = False

    def place_ships(self):
        while opp_ship_list:
            opp_ship_name, opp_ship_len, opp_ship_num = opp_ship_list[0]
            direction = random.choice(['horizontal', 'vertical'])
            x, y = [random.randint(0, 9) for _ in range(2)]

            if direction == 'horizontal':
                range_x = range(max(0, x - 1), min(x + opp_ship_len + 1, 10))
                range_y = range(max(0, y - 1), min(y + 2, 10))
                if len(range_x) < opp_ship_len + 1 or len(range_y) < 2:
                    continue
                if any(self.cells[row][col].value for row in range_y
                       for col in range_x):
                    continue
                for num in range(x, x + opp_ship_len):
                    self.cells[y][num].value = TARGET_REVEALED
                opp_ship_cells = [(x, y) for x in range(x, x+opp_ship_len)]
                self.ships.append(Ship(opp_ship_name, opp_ship_cells,
                                       direction))
            elif direction == 'vertical':
                range_x = range(max(0, x - 1), min(x + 2, 10))
                range_y = range(max(0, y - 1), min(y + opp_ship_len + 1, 10))
                if len(range_x) < 2 or len(range_y) < opp_ship_len + 1:
                    continue
                if any(self.cells[row][col].value for row in range_y
                       for col in range_x):
                    continue
                for num in range(y, y + opp_ship_len):
                    self.cells[num][x].value = TARGET_REVEALED
                opp_ship_cells = [(x, y) for y in range(y, y+opp_ship_len)]
                self.ships.append(Ship(opp_ship_name, opp_ship_cells,
                                       direction))
            if opp_ship_num == 1:
                opp_ship_list.pop(0)
            else:
                opp_ship_list[0][2] -= 1

    def is_repeated_move(self):
        if self.selected:
            x, y = self.selected
            if (x, y) in self.moves:
                return True

    def shot_missed(self):
        x, y = self.selected
        hit = False
        self.moves.append((x, y))
        self.cells[x][y].visible = True
        for ship in self.ships:
            if (x, y) in ship.cells:
                hit = True
                self.cells[x][y].value = TARGET_HIT
                self.hits_left -= 1
                ship.reduce((x, y))
                ship.check_damage()
                if ship.destroyed:
                    self.last_call = ship.name
        if not hit:
            self.cells[x][y].value = TARGET_MISSED
            return True


class Cell:

    def __init__(self, row, col, bf_width, bf_height, h_offset):
        self.color = COLOR_ACTIVE_CELL
        self.value = None
        self.row = row
        self.col = col
        self.h_offset = h_offset
        self.bf_width = bf_width
        self.bf_height = bf_height
        self.selected = False
        self.locked = False
        self.visible = True

    def draw(self):
        gap = self.bf_width / 10
        x = self.row * gap
        y = self.col * gap
        pygame.draw.rect(WIN, self.color, (x, y + self.h_offset, gap, gap))

        if self.value and self.visible:
            text = FONT.render(self.value, True, (0, 0, 0))
            WIN.blit(text, (x + 5, y + self.h_offset - 2))

        if self.selected:
            pygame.draw.rect(WIN, COLOR_SELECTED,
                             (x, y + self.h_offset, gap, gap), 3)

        if self.locked:
            pygame.draw.rect(WIN, COLOR_LOCKED,
                             (x, y + self.h_offset, gap, gap), 3)


class Ship:
    def __init__(self, name, cells, direction):
        self.name = name
        self.cells = cells
        self.length = len(cells)
        self.direction = direction
        self.destroyed = False

    def reduce(self, pos):
        self.cells.pop(self.cells.index(pos))

    def check_damage(self):
        if not self.cells:
            self.destroyed = True


def draw_window(player, opp, msg, msg2, show_legend=False, ships_placed=False):
    pygame.display.set_mode((WIN_WIDTH, WIN_HEIGHT))

    WIN.fill(COLOR_BG)

    player.draw()
    opp.draw()

    draw_text(f'Player\'s board: ({hits - player.hits_left}/'
              f'{hits} hits)', EDGE, EDGE)
    draw_text(f'Opponent\'s board: ({hits - opp.hits_left}/{hits} '
              f'hits)', EDGE,
              3 * EDGE + BF_HEIGHT + TEXT_PLAYER.get_height())
    if ships_placed:
        draw_text(msg, BF_WIDTH + 16 * EDGE, 3 * EDGE + BF_HEIGHT +
                  TEXT_PLAYER.get_height())
        draw_text(msg2, BF_WIDTH + 16 * EDGE, 9 * EDGE + BF_HEIGHT +
                  TEXT_PLAYER.get_height())
    else:
        draw_text(msg, BF_WIDTH + 16 * EDGE, EDGE)
        draw_text(msg2, BF_WIDTH + 16 * EDGE, 7 * EDGE)

    if show_legend:
        if ships_placed:
            for i, text in enumerate(LEGEND_SHOOTING):
                draw_text(text, BF_WIDTH + 16 * EDGE, 28 * EDGE + BF_HEIGHT +
                          TEXT_PLAYER.get_height() + 6 * i * EDGE)
        else:
            for i, text in enumerate(LEGEND_PLACEMENT):
                draw_text(text, BF_WIDTH + 16 * EDGE, 18 * EDGE + 6 * i * EDGE)

    pygame.display.flip()


def game_status(player, opp):
    if not player.hits_left:
        draw_window(player, opp, MSG_PLAYER_NO_SHIPS, MSG_OPP_WINS)
        sleep(3)
        quit()
    elif not opp.hits_left:
        draw_window(player, opp, MSG_OPP_NO_SHIPS, MSG_PLAYER_WINS)
        sleep(3)
        quit()


def draw_text(string, x, y):
    msg = FONT.render(string, True, (0, 0, 0))
    WIN.blit(msg, (x, y))


def main():
    run = True
    hit = False
    disabled = False
    move_repeated = False
    pygame.display.set_caption('Battleship')
    player_field = PlayerField(10, 10, TEXT_PLAYER.get_height() + 2 * EDGE)
    opponent_field = OpponentField(10, 10, TEXT_PLAYER.get_height() +
                                   4 * EDGE + BF_HEIGHT + TEXT_OPP.get_height())

    opponent_field.place_ships()

    draw_window(player_field, opponent_field, MSG_LETS_PLAY, MSG_EMPTY,
                False, False)
    sleep(2)

    while run:
        if pl_ship_list:
            draw_window(player_field, opponent_field,
                        f'Place the {pl_ship_list[0][0]} of size '
                        f'{pl_ship_list[0][1]}',
                        TARGET_NOT, True, False)
        elif not disabled:
            player_field.disable()
            disabled = True
        else:
            if move_repeated:
                draw_window(player_field, opponent_field,
                            MSG_MOVE_REPEAT, MSG_PICK_ANOTHER, True, True)
            elif hit:
                if opponent_field.last_call:
                    draw_window(player_field, opponent_field,
                                f'Enemy {opponent_field.last_call} has sunk!', MSG_PICK_ANOTHER, True, True)
                else:
                    draw_window(player_field, opponent_field,
                                MSG_HIT, MSG_PICK_ANOTHER, True, True)
            else:
                draw_window(player_field, opponent_field,
                            MSG_PLAYER_TURN, MSG_PICK_CELL, True, True)

        keys = pygame.key.get_pressed()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
            if keys[pygame.K_q]:
                run = False
            if event.type == pygame.MOUSEBUTTONDOWN:
                pos = pygame.mouse.get_pos()
                player_bf_clicked = player_field.read_cell(pos)
                opp_bf_clicked = opponent_field.read_cell(pos)
                player_field.deselect_cells()
                opponent_field.deselect_cells()
                if player_bf_clicked and pl_ship_list:
                    player_field.select_cell(player_bf_clicked[0],
                                             player_bf_clicked[1])
                elif opp_bf_clicked and not pl_ship_list:
                    opponent_field.select_cell(opp_bf_clicked[0],
                                               opp_bf_clicked[1])
            if event.type == pygame.KEYDOWN:
                if player_field.selected and pl_ship_list:
                    if event.key == pygame.K_UP:
                        player_field.move_arrows('up')
                    if event.key == pygame.K_DOWN:
                        player_field.move_arrows('down')
                    if event.key == pygame.K_LEFT:
                        player_field.move_arrows('left')
                    if event.key == pygame.K_RIGHT:
                        player_field.move_arrows('right')
                    if event.key == pygame.K_SPACE:
                        player_field.lock_cell()
                    if event.key == pygame.K_DELETE:
                        player_field.locked = []
                    if event.key == pygame.K_RETURN:
                        player_field.is_placement_correct()
                if opponent_field.selected and not pl_ship_list:
                    if event.key == pygame.K_UP:
                        opponent_field.move_arrows('up')
                    if event.key == pygame.K_DOWN:
                        opponent_field.move_arrows('down')
                    if event.key == pygame.K_LEFT:
                        opponent_field.move_arrows('left')
                    if event.key == pygame.K_RIGHT:
                        opponent_field.move_arrows('right')
                    if event.key == pygame.K_RETURN:
                        opponent_field.last_call = ''
                        if opponent_field.is_repeated_move():
                            move_repeated = True
                        else:
                            move_repeated = False
                            player_missed = opponent_field.shot_missed()
                            game_status(player_field, opponent_field)
                            if player_missed:
                                hit = False
                                draw_window(player_field, opponent_field,
                                            MSG_PLAYER_MISS, MSG_OPP_TURN,
                                            True, True)
                                sleep(1.5)
                                player_field.opponents_turn()
                                game_status(player_field, opponent_field)
                            else:
                                hit = True


if __name__ == '__main__':
    main()
